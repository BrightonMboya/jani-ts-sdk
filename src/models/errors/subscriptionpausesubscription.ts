/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Failed to update subscription due to bad conflict
 */
export type SubscriptionPauseSubscriptionSubscriptionResponseResponseBodyData =
  {
    message: string;
    error: string;
  };

/**
 * Failed to update subscription due to bad conflict
 */
export class SubscriptionPauseSubscriptionSubscriptionResponseResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionPauseSubscriptionSubscriptionResponseResponseBodyData;

  constructor(
    err: SubscriptionPauseSubscriptionSubscriptionResponseResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionPauseSubscriptionSubscriptionResponseResponseBody";
  }
}

/**
 * No Subscription found with that Id
 */
export type SubscriptionPauseSubscriptionSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * No Subscription found with that Id
 */
export class SubscriptionPauseSubscriptionSubscriptionResponseBody
  extends Error
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionPauseSubscriptionSubscriptionResponseBodyData;

  constructor(err: SubscriptionPauseSubscriptionSubscriptionResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionPauseSubscriptionSubscriptionResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscriptionPauseSubscriptionResponseBodyData = {
  message: string;
  error: string;
};

/**
 * Bad Request
 */
export class SubscriptionPauseSubscriptionResponseBody extends Error {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: SubscriptionPauseSubscriptionResponseBodyData;

  constructor(err: SubscriptionPauseSubscriptionResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "SubscriptionPauseSubscriptionResponseBody";
  }
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new SubscriptionPauseSubscriptionSubscriptionResponseResponseBody(
        v,
      );
    });

/** @internal */
export type SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$Outbound =
  {
    message: string;
    error: string;
  };

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionSubscriptionResponseResponseBody
  > = z.instanceof(
    SubscriptionPauseSubscriptionSubscriptionResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$Outbound` instead. */
  export type Outbound =
    SubscriptionPauseSubscriptionSubscriptionResponseResponseBody$Outbound;
}

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionResponseBody$inboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    error: z.string(),
  })
    .transform((v) => {
      return new SubscriptionPauseSubscriptionSubscriptionResponseBody(v);
    });

/** @internal */
export type SubscriptionPauseSubscriptionSubscriptionResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionSubscriptionResponseBody
  > = z.instanceof(SubscriptionPauseSubscriptionSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionSubscriptionResponseBody$Outbound` instead. */
  export type Outbound =
    SubscriptionPauseSubscriptionSubscriptionResponseBody$Outbound;
}

/** @internal */
export const SubscriptionPauseSubscriptionResponseBody$inboundSchema: z.ZodType<
  SubscriptionPauseSubscriptionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  error: z.string(),
})
  .transform((v) => {
    return new SubscriptionPauseSubscriptionResponseBody(v);
  });

/** @internal */
export type SubscriptionPauseSubscriptionResponseBody$Outbound = {
  message: string;
  error: string;
};

/** @internal */
export const SubscriptionPauseSubscriptionResponseBody$outboundSchema:
  z.ZodType<
    SubscriptionPauseSubscriptionResponseBody$Outbound,
    z.ZodTypeDef,
    SubscriptionPauseSubscriptionResponseBody
  > = z.instanceof(SubscriptionPauseSubscriptionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPauseSubscriptionResponseBody$ {
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionPauseSubscriptionResponseBody$inboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionPauseSubscriptionResponseBody$outboundSchema;
  /** @deprecated use `SubscriptionPauseSubscriptionResponseBody$Outbound` instead. */
  export type Outbound = SubscriptionPauseSubscriptionResponseBody$Outbound;
}
